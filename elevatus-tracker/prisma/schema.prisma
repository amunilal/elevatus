generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  userType        UserType
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  employee        Employee?
  employer        Employer?
  sessions        Session[]
}

enum UserType {
  EMPLOYEE
  EMPLOYER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employer {
  id              String        @id @default(cuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            EmployerRole
  permissions     Json          @default("{}")
  department      String?
  managedTeams    Team[]        @relation("TeamManager")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum EmployerRole {
  SUPER_ADMIN
  HR_ADMIN
  MANAGER
}

// Employee Models
model Employee {
  id                String            @id @default(cuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeCode      String            @unique
  firstName         String
  lastName          String
  middleName        String?
  displayName       String?
  
  // South African specific
  idNumber          String?           @unique
  passportNumber    String?
  
  // Contact Information
  personalEmail     String?
  phoneNumber       String?
  emergencyContact  Json?
  
  // Employment Details
  designation       String
  department        String
  teamId            String?
  team              Team?             @relation(fields: [teamId], references: [id])
  employmentType    EmploymentType
  employmentStatus  EmploymentStatus  @default(ACTIVE)
  
  // Dates
  dateOfBirth       DateTime?
  hiredDate         DateTime
  confirmationDate  DateTime?
  lastWorkingDate   DateTime?
  
  // Additional Information
  address           Json?
  bankDetails       Json?
  taxDetails        Json?
  
  // Relations
  attendances       Attendance[]
  leaves            Leave[]
  documents         Document[]
  reviews           Review[]          @relation("EmployeeReviews")
  reviewsGiven      Review[]          @relation("ReviewerReviews")
  enrollments       Enrollment[]
  userBadges        UserBadge[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  RESIGNED
  ON_LEAVE
}

model Team {
  id          String      @id @default(cuid())
  name        String
  description String?
  managerId   String?
  manager     Employer?   @relation("TeamManager", fields: [managerId], references: [id])
  employees   Employee[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Attendance Models
model Attendance {
  id              String    @id @default(cuid())
  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date            DateTime  @db.Date
  checkIn         DateTime?
  checkOut        DateTime?
  workingHours    Float?
  overtimeHours   Float?
  status          AttendanceStatus
  location        Json?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([employeeId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  WEEKEND
  HOLIDAY
  LEAVE
  REMOTE
}

// Leave Management (BCEA Compliant)
model Leave {
  id              String        @id @default(cuid())
  employeeId      String
  employee        Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveType       LeaveType
  startDate       DateTime      @db.Date
  endDate         DateTime      @db.Date
  totalDays       Float
  reason          String
  status          LeaveStatus   @default(PENDING)
  approverId      String?
  approvedDate    DateTime?
  approverNotes   String?
  documents       Document[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum LeaveType {
  ANNUAL          // 21 days
  SICK            // 30 days per 3-year cycle
  FAMILY          // 3 days per year
  MATERNITY       // 4 months
  PARENTAL        // 10 days
  UNPAID
  STUDY
  COMPASSIONATE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model LeaveBalance {
  id              String    @id @default(cuid())
  employeeId      String
  year            Int
  leaveType       LeaveType
  entitled        Float
  taken           Float
  remaining       Float
  cycleStart      DateTime
  cycleEnd        DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([employeeId, year, leaveType])
}

// Performance Review Models
model Review {
  id              String          @id @default(cuid())
  employeeId      String
  employee        Employee        @relation("EmployeeReviews", fields: [employeeId], references: [id], onDelete: Cascade)
  reviewerId      String
  reviewer        Employee        @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  reviewCycleId   String
  reviewCycle     ReviewCycle     @relation(fields: [reviewCycleId], references: [id])
  reviewType      ReviewType
  status          ReviewStatus    @default(NOT_STARTED)
  
  // Review Data
  selfAssessment  Json?
  managerReview   Json?
  finalRating     Float?
  summary         String?
  
  // Goals
  goals           Goal[]
  
  // Dates
  dueDate         DateTime
  submittedAt     DateTime?
  completedAt     DateTime?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum ReviewType {
  ANNUAL
  MID_YEAR
  QUARTERLY
  PROBATION
  PROJECT
}

enum ReviewStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  UNDER_REVIEW
  COMPLETED
}

model ReviewCycle {
  id          String      @id @default(cuid())
  name        String
  year        Int
  quarter     Int?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean     @default(true)
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Goal {
  id          String      @id @default(cuid())
  reviewId    String
  review      Review      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  title       String
  description String
  targetDate  DateTime
  status      GoalStatus  @default(NOT_STARTED)
  progress    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Learning & Development Models
model Course {
  id              String              @id @default(cuid())
  title           String
  description     String
  category        String
  duration        Int                 // in minutes
  difficulty      CourseDifficulty
  isActive        Boolean             @default(true)
  isMandatory     Boolean             @default(false)
  
  // Content
  materials       CourseMaterial[]
  
  // Relations
  enrollments     Enrollment[]
  badges          Badge[]
  prerequisites   Course[]            @relation("Prerequisites")
  prerequisiteFor Course[]            @relation("Prerequisites")
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model CourseMaterial {
  id          String          @id @default(cuid())
  courseId    String
  course      Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  type        MaterialType
  url         String?
  content     String?
  order       Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum MaterialType {
  VIDEO
  PDF
  QUIZ
  ASSIGNMENT
  LINK
}

model Enrollment {
  id              String              @id @default(cuid())
  employeeId      String
  employee        Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt      DateTime            @default(now())
  completedAt     DateTime?
  progress        Int                 @default(0) // percentage
  score           Int?
  status          EnrollmentStatus    @default(NOT_STARTED)
  
  @@unique([employeeId, courseId])
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Badge {
  id              String      @id @default(cuid())
  name            String
  description     String
  imageUrl        String
  criteria        Json        // Define completion criteria
  badgeType       BadgeType
  courseId        String?
  course          Course?     @relation(fields: [courseId], references: [id])
  userBadges      UserBadge[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum BadgeType {
  COURSE_COMPLETION
  SKILL_PROFICIENCY
  MILESTONE
  CERTIFICATION
}

model UserBadge {
  id              String      @id @default(cuid())
  employeeId      String
  employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  badgeId         String
  badge           Badge       @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt        DateTime    @default(now())
  expiresAt       DateTime?
  
  @@unique([employeeId, badgeId])
}

// Document Management
model Document {
  id              String          @id @default(cuid())
  employeeId      String?
  employee        Employee?       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leaveId         String?
  leave           Leave?          @relation(fields: [leaveId], references: [id], onDelete: Cascade)
  type            DocumentType
  title           String
  fileName        String
  fileUrl         String
  fileSize        Int
  mimeType        String
  uploadedBy      String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum DocumentType {
  ID_DOCUMENT
  PASSPORT
  CERTIFICATE
  CONTRACT
  PAYSLIP
  MEDICAL_CERTIFICATE
  LEAVE_DOCUMENT
  OTHER
}

// Audit Trail
model AuditLog {
  id              String      @id @default(cuid())
  userId          String
  action          String
  entity          String
  entityId        String
  oldValues       Json?
  newValues       Json?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime    @default(now())
}