generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String?
  userType              UserType
  isActive              Boolean   @default(true)
  passwordSetupToken    String?   @unique
  passwordSetupExpires  DateTime?
  passwordSetupUsed     Boolean   @default(false)
  resetToken            String?   @unique
  resetTokenExpires     DateTime?
  lastLoginAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  employee              Employee?
  employer              Employer?
  sessions              Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employer {
  id           String       @id @default(cuid())
  userId       String       @unique
  role         EmployerRole
  permissions  Json         @default("{}")
  department   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  managedTeams Team[]       @relation("TeamManager")
}

model Employee {
  id               String           @id @default(cuid())
  userId           String           @unique
  employeeCode     String           @unique
  firstName        String
  lastName         String
  middleName       String?
  displayName      String?
  idNumber         String?          @unique
  passportNumber   String?
  personalEmail    String?
  phoneNumber      String?
  emergencyContact Json?
  designation      String
  department       String
  teamId           String?
  employmentType   EmploymentType
  employmentStatus EmploymentStatus @default(ACTIVE)
  dateOfBirth      DateTime?
  hiredDate        DateTime
  confirmationDate DateTime?
  lastWorkingDate  DateTime?
  address          Json?
  bankDetails      Json?
  taxDetails       Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  attendances      Attendance[]
  documents        Document[]
  team             Team?            @relation(fields: [teamId], references: [id])
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments      Enrollment[]
  leaves           Leave[]
  reviews          Review[]         @relation("EmployeeReviews")
  reviewsGiven     Review[]         @relation("ReviewerReviews")
  userBadges       UserBadge[]
}

model Team {
  id          String     @id @default(cuid())
  name        String
  description String?
  managerId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
  manager     Employer?  @relation("TeamManager", fields: [managerId], references: [id])
}

model Attendance {
  id            String           @id @default(cuid())
  employeeId    String
  date          DateTime         @db.Date
  checkIn       DateTime?
  checkOut      DateTime?
  workingHours  Float?
  overtimeHours Float?
  status        AttendanceStatus
  location      Json?
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  employee      Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
}

model Leave {
  id            String      @id @default(cuid())
  employeeId    String
  leaveType     LeaveType
  startDate     DateTime    @db.Date
  endDate       DateTime    @db.Date
  totalDays     Float
  reason        String
  status        LeaveStatus @default(PENDING)
  approverId    String?
  approvedDate  DateTime?
  approverNotes String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  documents     Document[]
  employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model LeaveBalance {
  id         String    @id @default(cuid())
  employeeId String
  year       Int
  leaveType  LeaveType
  entitled   Float
  taken      Float
  remaining  Float
  cycleStart DateTime
  cycleEnd   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([employeeId, year, leaveType])
}

model Review {
  id             String       @id @default(cuid())
  employeeId     String
  reviewerId     String
  reviewCycleId  String
  reviewType     ReviewType
  status         ReviewStatus @default(NOT_STARTED)
  selfAssessment Json?
  managerReview  Json?
  finalRating    Float?
  summary        String?
  dueDate        DateTime
  submittedAt    DateTime?
  completedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  goals          Goal[]
  employee       Employee     @relation("EmployeeReviews", fields: [employeeId], references: [id], onDelete: Cascade)
  reviewCycle    ReviewCycle  @relation(fields: [reviewCycleId], references: [id])
  reviewer       Employee     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
}

model ReviewCycle {
  id        String   @id @default(cuid())
  name      String
  year      Int
  quarter   Int?
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]
}

model Goal {
  id          String     @id @default(cuid())
  reviewId    String
  title       String
  description String
  targetDate  DateTime
  status      GoalStatus @default(NOT_STARTED)
  progress    Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  review      Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Course {
  id          String           @id @default(cuid())
  title       String
  description String
  category    String
  duration    Int
  difficulty  CourseDifficulty
  isActive    Boolean          @default(true)
  isMandatory Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  badges      Badge[]
  materials   CourseMaterial[]
  enrollments Enrollment[]
  Course_A    Course[]         @relation("Prerequisites")
  Course_B    Course[]         @relation("Prerequisites")
}

model CourseMaterial {
  id        String       @id @default(cuid())
  courseId  String
  title     String
  type      MaterialType
  url       String?
  content   String?
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id          String           @id @default(cuid())
  employeeId  String
  courseId    String
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  progress    Int              @default(0)
  score       Int?
  status      EnrollmentStatus @default(NOT_STARTED)
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, courseId])
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String
  imageUrl    String
  criteria    Json
  badgeType   BadgeType
  courseId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  course      Course?     @relation(fields: [courseId], references: [id])
  userBadges  UserBadge[]
}

model UserBadge {
  id         String    @id @default(cuid())
  employeeId String
  badgeId    String
  earnedAt   DateTime  @default(now())
  expiresAt  DateTime?
  badge      Badge     @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, badgeId])
}

model Document {
  id         String       @id @default(cuid())
  employeeId String?
  leaveId    String?
  type       DocumentType
  title      String
  fileName   String
  fileUrl    String
  fileSize   Int
  mimeType   String
  uploadedBy String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  employee   Employee?    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leave      Leave?       @relation(fields: [leaveId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model EmailLog {
  id          String      @id @default(cuid())
  to          String
  subject     String
  emailType   EmailType
  status      EmailStatus @default(SENT)
  templateUsed String?
  userId      String?
  employeeId  String?
  employerId  String?
  sentAt      DateTime    @default(now())
  failureReason String?
  metadata    Json?
}

enum UserType {
  EMPLOYEE
  EMPLOYER
}

enum EmployerRole {
  SUPER_ADMIN
  HR_ADMIN
  MANAGER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  RESIGNED
  ON_LEAVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  WEEKEND
  HOLIDAY
  LEAVE
  REMOTE
}

enum LeaveType {
  ANNUAL
  SICK
  FAMILY
  MATERNITY
  PARENTAL
  UNPAID
  STUDY
  COMPASSIONATE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ReviewType {
  ANNUAL
  MID_YEAR
  QUARTERLY
  PROBATION
  PROJECT
}

enum ReviewStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
  UNDER_REVIEW
  COMPLETED
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MaterialType {
  VIDEO
  PDF
  QUIZ
  ASSIGNMENT
  LINK
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum BadgeType {
  COURSE_COMPLETION
  SKILL_PROFICIENCY
  MILESTONE
  CERTIFICATION
}

enum DocumentType {
  ID_DOCUMENT
  PASSPORT
  CERTIFICATE
  CONTRACT
  PAYSLIP
  MEDICAL_CERTIFICATE
  LEAVE_DOCUMENT
  OTHER
}

enum EmailType {
  WELCOME
  PASSWORD_SETUP
  PASSWORD_RESET
  REVIEW_NOTIFICATION
  LEAVE_REQUEST
  SYSTEM_NOTIFICATION
  OTHER
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
  DELIVERED
}
