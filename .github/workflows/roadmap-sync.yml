# .github/workflows/roadmap-sync.yml
name: Sync Roadmap to Issues

on:
  push:
    paths:
      - 'ROADMAP.md'
  workflow_dispatch:

jobs:
  sync-roadmap:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Parse Roadmap and Create Issues
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read and parse Elevatus ROADMAP.md
          const roadmapContent = fs.readFileSync('ROADMAP.md', 'utf8');
          const lines = roadmapContent.split('\n');
          
          let currentPhase = null;
          let currentSection = null;
          const phases = [];
          let inPhase = false;
          
          // Calculate project start date (2 weeks from now)
          const projectStart = new Date();
          projectStart.setDate(projectStart.getDate() + 14);
          
          function calculateDueDate(weekRange) {
            if (!weekRange) return null;
            
            let endWeek;
            if (weekRange.includes('-')) {
              endWeek = parseInt(weekRange.split('-')[1]);
            } else if (weekRange.match(/\d+/)) {
              endWeek = parseInt(weekRange.match(/\d+/)[0]);
            } else {
              return null;
            }
            
            const dueDate = new Date(projectStart);
            dueDate.setDate(dueDate.getDate() + (endWeek - 1) * 7);
            return dueDate.toISOString();
          }
          
          for (const line of lines) {
            // Match Phase headers (### Phase X:)
            const phaseMatch = line.match(/^### (Phase \d+:.*?) \(Weeks? ([\d-]+)\)/);
            if (phaseMatch) {
              // Save previous phase
              if (currentPhase) {
                phases.push(currentPhase);
              }
              
              const title = phaseMatch[1];
              const weekRange = phaseMatch[2];
              
              currentPhase = {
                title: title,
                weekRange: weekRange,
                dueDate: calculateDueDate(weekRange),
                description: '',
                sections: {
                  'Milestones': [],
                  'Key Deliverables': [],
                  'Key Features': [],
                  'Quality Metrics': []
                },
                status: 'Not Started'
              };
              inPhase = true;
              currentSection = null;
              continue;
            }
            
            // Skip if not in a phase
            if (!inPhase || !currentPhase) continue;
            
            // Match section headers (#### Milestones, Key Deliverables, etc.)
            const sectionMatch = line.match(/^#### (Milestones|Key Deliverables|Key Features|Quality Metrics)/);
            if (sectionMatch) {
              currentSection = sectionMatch[1];
              continue;
            }
            
            // Match task items (- [ ] or - [x])
            const taskMatch = line.match(/^- \[([ x])\] (.+)/);
            if (taskMatch && currentSection) {
              const completed = taskMatch[1] === 'x';
              const taskTitle = taskMatch[2];
              
              currentPhase.sections[currentSection].push({
                title: taskTitle,
                completed: completed
              });
              continue;
            }
            
            // Add other content to description (skip separators)
            if (line.trim() && !line.startsWith('---') && !line.startsWith('**Status:**')) {
              currentPhase.description += line + '\n';
            }
          }
          
          // Add the last phase
          if (currentPhase) {
            phases.push(currentPhase);
          }
          
          console.log(`Found ${phases.length} phases to process`);
          
          // Create milestones and issues for each phase
          for (const phase of phases) {
            try {
              console.log(`Processing: ${phase.title}`);
              
              // Create milestone
              let milestoneNumber = null;
              if (phase.dueDate) {
                try {
                  const milestone = await github.rest.issues.createMilestone({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: phase.title,
                    description: `**Week Range:** ${phase.weekRange}\n**Status:** ${phase.status}\n\n${phase.description.substring(0, 500)}...`,
                    due_on: phase.dueDate
                  });
                  milestoneNumber = milestone.data.number;
                  console.log(`‚úÖ Created milestone: ${phase.title}`);
                } catch (milestoneError) {
                  console.log(`‚ö†Ô∏è Milestone may already exist: ${phase.title}`);
                }
              }
              
              // Create issues for each section with tasks
              for (const [sectionName, tasks] of Object.entries(phase.sections)) {
                if (tasks.length === 0) continue;
                
                const issueTitle = `${phase.title} - ${sectionName}`;
                
                // Build task checklist
                let taskList = '';
                for (const task of tasks) {
                  const checkbox = task.completed ? '[x]' : '[ ]';
                  const status = task.completed ? '‚úÖ' : '‚è≥';
                  taskList += `- ${checkbox} ${status} ${task.title}\n`;
                }
                
                const issueBody = `## ${sectionName}

**Phase:** ${phase.title}
**Week Range:** ${phase.weekRange}
**Status:** ${phase.status}
**Due Date:** ${phase.dueDate ? new Date(phase.dueDate).toLocaleDateString() : 'TBD'}

### Tasks Checklist:
${taskList}

### Phase Description:
${phase.description.substring(0, 800)}...

---
*This issue was automatically created from ROADMAP.md*`;
                
                // Determine phase number for labeling
                const phaseNum = phase.title.match(/Phase (\d+)/)?.[1] || '1';
                
                const issueData = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: [
                    'roadmap',
                    `phase-${phaseNum}`,
                    sectionName.toLowerCase().replace(/ /g, '-'),
                    phase.status.toLowerCase().replace(/ /g, '-')
                  ]
                };
                
                if (milestoneNumber) {
                  issueData.milestone = milestoneNumber;
                }
                
                try {
                  const issue = await github.rest.issues.create(issueData);
                  console.log(`üìã Created issue: ${issueTitle}`);
                } catch (issueError) {
                  console.log(`‚ö†Ô∏è Issue may already exist: ${issueTitle}`);
                }
              }
              
              console.log(`‚úÖ Completed processing: ${phase.title}\n`);
              
            } catch (error) {
              console.error(`‚ùå Error processing ${phase.title}:`, error.message);
            }
          }
          
          console.log('üéâ Elevatus Roadmap sync completed!');
          console.log(`üìä Processed ${phases.length} phases`);
          console.log('üîó Check your repository Issues and Milestones tabs');
          console.log('üìã Next: Create a GitHub Project and add these issues to see the roadmap view');
